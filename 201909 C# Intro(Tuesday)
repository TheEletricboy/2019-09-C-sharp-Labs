##Intro to C# ##

##History of coding

Operating System ==> makes a bit of hardware (motherboard, processor, RAM, network card) 'work'.

#Common operating systems we know have been written originally in 'C'

		UNIX (original)				Paid, closed-source
		Apple IOS and OSX			UNIX Derivative, closed source
		Windows						Closed
		Linux(UNIX-like)			Open source


		OPEN SOURCE WINS!!!

		WINDOWS ==> .NET is now OPEN SOURCE!
		Linux ==> world's 500 SUPERCOMPUTERS

			TFLOP ==> TERA (10^12) Floating point operations/sec
				1,000,000,000,000


	Programming Language:

				'C'
				then
				C++ ==> in use today

		HOWEVER: we have
					
					Java: runs in "JVM" Java Virtual Machine (install JAVA)
					C#: Microsoft ==> main 'push' using this language
							F#: Functional Programming Language (apparently data based companies)
					Python:
							Engineering
							Data Science

===========================================================================================================================

#Cloud:
		
		Traditional Computing ran on local hardware

		Today - everything has changed

				Traditional: local
				Newer      : services to cloud

							1) AWS Amazon		No1 Provider 75%??
							2) Azure			25% market	***Microsoft: Most revenue in this place*** (620Â£ per year)
							3) Google cloud 	5%??

		Container: Mini Virtual Machine: Run individual 'apps'

				Group of containers: manage with 'Kubernetes' from Google (Its now open source)

		Function as a service ==> inidividual methods: call in cloud!

===========================================================================================================================

#Structure of an application

	.NET: old and huge, cumulative libraries for ALL WINDOWS!

	.NET Core: NEW, streamlined version: valid on Linux and MAC

	.sln is XML file with all NAMES of all Projects inside

		'Container' which has no functuion of itself ==> just to hold multiple projects

	.csproj is metadata for individual projects

	Program.cs

		Class Program{

			public static void Main(){

				//code run here
			}
		}
===========================================================================================================================

#.NET Structure

	In order to build a program with C# / .NET we need the following:

			CLI Common Language Infrastructure: RULES FOR THE LANGUAGE

			CLR 		Runtime				  : Run inside this environment

				Garbage Collector			  : Reclaim memory when we are finished with an object

			CSC C Sharp Compiler			  : Turn .cs text into .exe BINARY RUNTUME EXECUTABLE FILE

			CIL Common Intermediate Language  : Half-Compiled code'assembly language'

					CS ==> CIL (half way house)  ==> CLR runtime
					raw
					code

							Tool 'ILDASM' ==> inspect .exe and view this 'CIL' compiled code


===========================================================================================================================

#OOP Object Oriented Programming

Traditional computing has been LINAR PROGRAMMING where code starts at line 1 and runs to the end.
	
		OK but when GUI was invented, screen objects appeared

			Button ==> Click (event) ==> Method (function) (event handler)

				Object 		EVENT 		Method(code)
```cs

		Object looks like this:
			{
				id:1,								===> field: value (key/value pairs)
				name:"bob",			
				dob:"10/10/2001"
				likes:["strawberries", "pizza"]
			}

			Array [1,2,3]

			String "some text"

			Number:
				Whole: integer
				Decimal: float (32bits)/double(64bits)/decimal type (128bits)

			Char:
				'f'

===========================================================================================================================
#Creating basic objects

Class = Template = Blueprint for creating an object 
	
	class Mammal{

		int height;
		int weight;
		int length;
		string typeOfMammal;
	}

	var m01= new Mammal();
	m01.height = 400;
```
===========================================================================================================================
#Method

Method = Function
	
	Call a method to get something done

		Lets grow our DOG
```cs
			Grow(){

				//LET THE PC KNOW: IS IT RETURNING ANY VALUE???
            //IF NO ==> USE KEYWORD "VOID"
            //IF YES ==> SPECIFIY THE TYPE: IE INT, STRING

            this.Age++; //instead of Age = Age +1 or Age +=1
            this.Height += 10;  //when using THIS youre telling the program to change the actual CLASS VARIABLES
			}
```

===========================================================================================================================
#Private and Public Fields

	Class Person{

		private string NINO;
		public string name
	}

===========================================================================================================================

#Fields and Properties

In a class we have:
		
		fields- 	
			tend to abreviate				private string NINO;
			conevention camelCase 			private string privateData;
			convention _camelCase			private string _privateData;

		properties- 
			tend to be public 				public string Name {get;set;}
			convention PascalCase 			public string ThisIsAPublicProperty
			{get;set;} 						//abreviation for get/set methods which we coded already

EXAMPLE
```cs

class Program
    {
        static void Main(string[] args)
        {
            var rabbit = new Rabbit();
            rabbit.Name = "Cute01";
            //rabbit._bloodType.. INVALID
            rabbit.Age = -10;
            Console.WriteLine(rabbit.Age);

            int x = default;    //default for an integer is 0
        }
    }

    class Rabbit {
        private int _bloodType;             //field
        private int _age;
        public string Name { get; set; }    //auto-implemented property

        public int Age {
            get {
                return this._age;
            }
            set {
                if (value > 0) {
                    this._age = value;  //value is c# code word 
                }
            }
        }
    }

```
===========================================================================================================================
#Creating multiple objects

Array written 	[1,2,3] has a fixed size
List written 	List<int>() has VARIABLE SIZE and we can use this to add items to a list


Labs 05
	//Create a lab
	//count from 1-10
	//create rabbits
	//name = "Rabbit" + 0 + i   (Rabbit01, Rabbit02)
	//age = i
	//add to list of rabbits
	//print out list at end

===========================================================================================================================

#Inheritance
Lab06

		Natural World we think Species eg Mammal class ==> cats ==> lions ==> African Lion

```c
		var d = new Dog();
            d.Name = "Fido";
            var labrador01 = new Labrador();
            labrador01.Name = "MansBestFriend";
            labrador01.Age = 2; //child only
        }

        class Dog
        {
            public string Name { get; set; }
        }

        class Labrador: Dog
        {
            public int Age { get; set; }

        }
```
===========================================================================================================================

#Methods in more detail
labs06
		coneventionname 	is PascalCase		void DoThis(){}
		parameters 			passed in 			void DoThis(int x, string y){}
		return 				passed out 			string DoThis(){return "hi";}
		Optional 			passed in 			void DoThis(int x = 1000){}
											pass in x but if missing set value to a 1000

		out parameters 		pass out 			void DoThis(int x, int y, out int z)

		Tuple is a fancy new Variable from C#
			(int x, string y, bool z) is now a custom data type!

```c

	class Program
    {


        static void Main(string[] args)
        {
            DoThis();
            DoThisAswell();
            var m = new Mammal();       //m is an instance of the class MAMMAL
            m.GetOlder();       //call in a method from another class: which increases age to 1
            Console.WriteLine(m.Age);
            

            
            //method inside a method
            void DoThis(){

                Console.WriteLine("I am doing something");
            }
            //ATTACH METHOD TO CLASS: ADD 'STATIC' KEYWORD

            CountNumbers(5000);         //y only
            CountNumbers(5000, 3000);   //x and y

            OutParameter(10, 10, out int a);
            Console.WriteLine($"output parameter is: {a}");

            TupleMethod();              //not gathering the output: out put is wasted
            var tupleOutput = TupleMethod();    //output is sent to custom object
            Console.WriteLine($"{tupleOutput.x}, {tupleOutput.y}, {tupleOutput.z}");

        }

        static void DoThisAswell()
        {

            Console.WriteLine("i am doing something as well");
        }

        static void CountNumbers(int y, int x = 100) {
            Console.WriteLine(x*y);
        }

        static void OutParameter(int x, int y, out int z)
        {
            z = x * y;  //will return this as Z
        }

        static (int x, string y, bool z) TupleMethod()
        {
            return (10, "hi", false);
        }

    }

    class Mammal
    {

        public int Age { get; set; }
        public void GetOlder() { Age++; }
    }

 ```

===========================================================================================================================
#Naming

camelCaseLikeThis		private fields
PascalLikeThis			1) Methods (Verb: ie DoThis)
						2)Class names (noun)
						3)Properties 	public string Name{get;set;} 	Name is Pascal set

_private field 			underscore prefix: clearly  tell everyone its private

SQL_column_name_like_this	snake case

File names and a Fodler names and Paths to folder

	C:\Parent\Child\file1.txt 		PATH TO FOLDER

		Avoid spaces ALWAYS!
		"Strins with spaces in enclosed quotes!"

html-web-page-always-write-like-this (kebab case)	(in the URL)
	%20 means someone has put a space in a html page which is not good
===========================================================================================================================

# Constructor

```c
Class MyClass{
	
	private string NINO;
	public string MyName{get;set;}
	public string DateOfBirth{get;set}

}

var class01 = new MyClass();		//new keyword:invoking(calling) a special method called the CONSTRUCTOR METHOD
									//CONSTRUCTOR: use it when constructiong a new object
```

Constructors are NOT INHERITED SO CHILD CONSTRUCTORS 

Lab09

#Constructor Summary

Help us create new instances with a minimum of hard work
They are NOT inherited
default one is blank and is present initially. Must add it in if we create our own constructor and still want the default one present
===========================================================================================================================

#Overloading

Method01(){}
Method01(int x){}
Method01(string y){}
Method01(int x, string y){}

				OVERLOADS OF THE SAME METHOD


===========================================================================================================================

#Polymorphism

Interviews: favourite question
				What are the 4 pillars of OOP?
					1. Inheritance 	Parent=>Child 	class Child :Parent{}
					2.Encapsulation 	private keyword to hide NINO data/ engineChassisID
					3. Abstraction 	Public getter/setter methods to access and manipulate private data

						Picture

							Driver			Accelerator Pedal				Encapsulated Combustion Engine

									driver is 'abstracted' from the middle layer(engine) by a pedal



									instance 			public get/set 		private field
															property
					4. Polymorphism 


#Polymorphism
LAB11

	Picture: Family
		
		Parents: virtual HaveAParty(){ //invite friends: dinner party}
					(virtual: can override this idea if you want (optional))

		Child5yrs: override HaveAParty(){//bouncy castle}
					(override ==> child can optionallt replace method with own version)

		Child10yrs: override HaveAParty(){//quasar}

		Child18yrs : override HaveAParty(){//evening out}

	MINOR SIDE NOTE: two keywords with similar uses here:
						1) override
						2) new		

===========================================================================================================================

#Rabbit Explosion

class Rabbit{
	string Name;
	int Age;
}

List<Rabbit> rabbits

	Thread.Sleep(2000); 1/5 secs
	loop it 
	Every loop, create a new rabbit and add to list of rabbits

set a population limit and see how many iterations it takes to reach population limit

===========================================================================================================================

#Powershell CUSTOM COMMANDS

1)	C:\Users\myname\ create a folder called PowershellScripts
2)	text file called 'yourscript.ps1

then edit it with sublime:
3)	

test123

===========================================================================================================================

#Random
Comment = Control+k+c
Uncomment = Control+k+U


