Thursday 05/09/2019

#Working with Files
labs013


using System.IO;	//Input Output

===========================================================================================================================
#Adding Timing To your app to keep track of execution times(Stopwatch)

lab014


===========================================================================================================================

##oop Continued

#Abstract Classes
	
So far we have:

	Class Mercedes{									class is a blueprint/template for new objects
		private int _privateField;					field (private, encapsulated)

		public string Name{get;set;}				property(public, provides abstraction layer in OOP 4 pillars)

		public void DoThis(){}						Method(verb: action code)

		public Mercedes(){}							Constructor: same as class
	}

	var instance = new Merces();					instance = new object from CLASS

	A normal class is called a 'Concrete' class because we can create REA OBJECTS (REAL INSTANCES) from it.

===========================================================================================================================
#Mind picture for abstract classes

Think about a holiday planning:
```c
		class holliday{
			public void TravelPlans(){}

			public void PlacesToVisit(){ cw("this list is now complete");}

			public void Activities(){cw("All activities planned out");}				```
									 |-----Code Implementation------|
		}

		One method has NO CODE implementation (no code 'BODY')

			this method is 'Abstract', because it exists but has no code body.

```c				what do do then?:
									public abstract void TravelPlans();	

``` 				
					solution is to derive a sub-class inherit from abstract class:

							Parent: Abstract 	public abstract void 


=======================================================================================================================
#Sealed Classes

When dealing with security, it might not be a good idea that people can inherit from a secure class but then introduce vulnerabilities

Think car engine: seal inside a secure chassis so amateurs dont mess up the engine and cause accidents

Think CPU: discourage overclocking 
```c
	sealed class Security{

	}

//cannot inherit from this 
```
=======================================================================================================================
#Extending a Sealed class

String is a sealed class with lots if methods like this one:
```c
string x = "Hello World";
            if (x.StartsWith("Hello"))
            {
                Console.WriteLine("World.");	//will print World.
            }
```
but imagine we want our own string method!:

public static class AddingToStrings{
	public static void AmazingExtraStringMethod(this string s){
	s = s + "-----"
	}
}

=======================================================================================================================
#WPF Application

With this course we are going to have 3 areas of learning
		
		Console: Most of the learninghere! Core work

		WPF: Screen which can place objectives: crude app

							Goal:1)Business Interface
								 2) Simple Images for Game (Crude)

		Websites: Focus on business style application
					Functionning Data Etc
						A) ASP Regular Website
						B) MVC Website

WPF is Windows Presentation Foundation
	
		xml skeleton for GUI
		C# Code behind

				XML
						<root>
							<row>
								<col attribute="dataherealso">data</col>
							</row>
							<row>
								<col attribute="dataherealso">data</col>
							</row>
							<row>
								<col attribute="dataherealso">data</col>
							</row>
						</root>
					Microsoft LOVES XML

					Everyone else uses Json